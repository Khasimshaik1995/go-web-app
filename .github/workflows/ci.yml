name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - "helm/**"
      - "README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print GITHUB_WORKSPACE
        run: echo ${GITHUB_WORKSPACE}    

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...
  
  sonarqube-analysis:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print GITHUB_WORKSPACE
        run: echo ${GITHUB_WORKSPACE}  
      
      - name: Sonarqube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          projectBaseDir: /home/runner/work/go-web-app/go-web-app
          args: >
            -Dsonar.organization=niteshops-github-action
            -Dsonar.projectKey=GO-Web-Application
            -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
  sonarqube-quality-gate-check:
    needs: [build,sonarqube-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print GITHUB_WORKSPACE
        run: echo ${GITHUB_WORKSPACE}  

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
          projectBaseDir: /home/runner/work/go-web-app/go-web-app
          args: >
            -Dsonar.organization=niteshops-github-action
            -Dsonar.projectKey=GO-Web-Application
            -Dsonar.qualitygate.wait=true
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
  
        # Optionally you can use the output from the Quality Gate in another step.
        # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
         
       
